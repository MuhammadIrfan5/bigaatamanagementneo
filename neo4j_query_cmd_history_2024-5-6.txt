MATCH (p1:Patient), (p2:Patient)
WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
CREATE (p1)-[:SIMILAR {weight: 1}]->(p2);

CALL apoc.periodic.iterate(
  "MATCH (p1:Patient), (p2:Patient)
   WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
   RETURN p1, p2",
  "CREATE (r:SIMILAR {weight: 1})-[:FROM]->(p1)-[:TO]->(p2)
   RETURN p1, p2, r",
  {batchSize: 1000, parallel: false, limit: 20}
)
YIELD batches, total
RETURN batches, total;

CALL apoc.periodic.iterate(
  "MATCH (p1:Patient), (p2:Patient)
   WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
   RETURN p1, p2",
  "CREATE (r:SIMILAR {weight: 1})-[:FROM]->(p1)-[:TO]->(p2)
   RETURN p1, p2, r",
  {batchSize: 1000, parallel: false, limit: 2000}
)
YIELD batches, total
RETURN batches, total;

CALL apoc.periodic.iterate(
  "MATCH (p1:Patient), (p2:Patient)
   WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
   RETURN p1, p2",
  "CREATE (r:SIMILAR {weight: 1})-[:FROM]->(p1)-[:TO]->(p2)
   RETURN p1, p2, r",
  {batchSize: 1000, parallel: false, limit: 20000}
)
YIELD batches, total
RETURN batches, total;

MATCH (p:Patient)
RETURN p.BMI AS BMI, p.Diabetes_binary AS Diabetes;

CALL apoc.periodic.iterate(
  "MATCH (p1:Patient), (p2:Patient)
   WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
   RETURN p1, p2",
  "CREATE (p1)-[:SIMILAR {weight: 1}]->(p2)",
  {batchSize: 10000, parallel: false, limit: 2000}
);

CALL apoc.periodic.iterate(
  "MATCH (p1:Patient), (p2:Patient)
   WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
   RETURN p1, p2",
  "CREATE (p1)-[:SIMILAR {weight: 1}]->(p2)",
  {batchSize: 10000, parallel: false, limit: 2000}
);

MATCH (p:Patient)
RETURN p.BMI AS BMI, p.Diabetes_binary AS Diabetes;

CALL apoc.periodic.iterate(
  "MATCH (p1:Patient), (p2:Patient)
   WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
   RETURN p1, p2",
  "CREATE (p1)-[:SIMILAR {weight: 1}]->(p2)",
  {batchSize: 1000, parallel: false, limit: 2000}
);

CALL apoc.periodic.iterate(
  "MATCH (p1:Patient), (p2:Patient)
   WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
   RETURN p1, p2",
  "CREATE (p1)-[:SIMILAR {weight: 1}]->(p2)",
  {batchSize: 1000, parallel: false, limit: 20000}
);

MATCH (p1:Patient), (p2:Patient)
WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
CREATE (p1)-[:SIMILAR {weight: 1}]->(p2)
Limit 20000;

MATCH (p:Patient)
WHERE p.HighBP = '1' AND p.Diabetes_binary = '1'
RETURN count(p) AS PatientsWithBoth;

MATCH (p:Patient)
WHERE p.HighBP = '1' AND p.Diabetes_binary = '1'
RETURN count(p) AS PatientsWithBoth
Limit 20000;

MATCH (p:Patient)-[r:SIMILAR]->(p2:Patient)
WHERE p.Diabetes_binary = '1'  // Focusing on diabetic patients
RETURN p, r, p2
LIMIT 100;

MATCH (p:Patient)
RETURN p.Diabetes_binary AS DiabetesStatus, count(*) AS Count;

MATCH (p:Patient)
RETURN p.Diabetes_binary AS DiabetesStatus, count(*) AS Count;

MATCH (p1:Patient), (p2:Patient)
WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
CREATE (p1)-[:SIMILAR {weight: 1}]->(p2);

MATCH (p:Patient)
WHERE p.HighBP = '1' AND p.Diabetes_binary = '1'
RETURN count(p) AS PatientsWithBoth;

MATCH (p:Patient)
WHERE p.HighBP = '1' AND p.Diabetes_binary = '1'
RETURN count(p) AS PatientsWithBoth;

MATCH (p1:Patient), (p2:Patient)
WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
CREATE (p1)-[:SIMILAR {weight: 1}]->(p2);

MATCH (p1:Patient), (p2:Patient)
WHERE p1 <> p2 AND abs(p1.BMI - p2.BMI) < 5 AND p1.HighBP = p2.HighBP
CREATE (p1)-[:SIMILAR {weight: 1}]->(p2);

MATCH (p:Patient)
WHERE p.HighBP = '1'
RETURN count(p) AS PatientsWithHighBP;

MATCH (p:Patient)
WHERE p.HighBP = '1' AND p.Diabetes_binary = '1'
RETURN count(p) AS PatientsWithBoth;

MATCH (p:Patient)
RETURN p.BMI AS BMI, p.Diabetes_binary AS Diabetes
ORDER BY BMI;

MATCH (p:Patient)
WHERE p.Diabetes_binary = '0'
RETURN count(p) AS DiabeticPatients;

MATCH (p:Patient)
WHERE p.Diabetes_binary = '1'
RETURN count(p) AS DiabeticPatients;

CALL apoc.periodic.iterate(
  "LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row RETURN row",
  "CREATE (p:Patient {
    id: row.id,
    AnyHealthcare: row.AnyHealthcare,
    CholCheck: row.CholCheck,
    Fruits: row.Fruits,
    Age: toInteger(row.Age),
    MentHlth: row.MentHlth,
    Smoker: row.Smoker,
    Stroke: row.Stroke,
    HvyAlcoholConsump: row.HvyAlcoholConsump,
    HeartDiseaseorAttack: row.HeartDiseaseorAttack,
    PhysActivity: row.PhysActivity,
    Income: toInteger(row.Income),
    PhysHlth: row.PhysHlth,
    GenHlth: toInteger(row.GenHlth),
    Education: toInteger(row.Education),
    Diabetes_binary: row.Diabetes_binary,
    HighBP: row.HighBP,
    Veggies: row.Veggies,
    BMI: toFloat(row.BMI),
    NoDocbcCost: row.NoDocbcCost,
    HighChol: row.HighChol,
    DiffWalk: row.DiffWalk,
    Sex: row.Sex
  })",
  {
    batchSize: 500,
    iterateList: true,
    parallel: false,
    limit: 20000
  }
)
YIELD total, batches, failedBatches, failedOperations, retries, errorMessages
RETURN total, batches, failedBatches, failedOperations, retries, errorMessages;

CALL apoc.periodic.iterate(
  "LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row RETURN row",
  "CREATE (p:Patient {
    id: row.id,
    AnyHealthcare: row.AnyHealthcare,
    CholCheck: row.CholCheck,
    Fruits: row.Fruits,
    Age: toInteger(row.Age),
    MentHlth: row.MentHlth,
    Smoker: row.Smoker,
    Stroke: row.Stroke,
    HvyAlcoholConsump: row.HvyAlcoholConsump,
    HeartDiseaseorAttack: row.HeartDiseaseorAttack,
    PhysActivity: row.PhysActivity,
    Income: toInteger(row.Income),
    PhysHlth: row.PhysHlth,
    GenHlth: toInteger(row.GenHlth),
    Education: toInteger(row.Education),
    Diabetes_binary: row.Diabetes_binary,
    HighBP: row.HighBP,
    Veggies: row.Veggies,
    BMI: toFloat(row.BMI),
    NoDocbcCost: row.NoDocbcCost,
    HighChol: row.HighChol,
    DiffWalk: row.DiffWalk,
    Sex: row.Sex
  })",
  {
    batchSize: 1000,
    iterateList: true,
    parallel: false,
    limit: 2000
  }
);

CALL apoc.periodic.iterate(
  "LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row RETURN row",
  "CREATE (p:Patient {
    id: row.id,
    AnyHealthcare: row.AnyHealthcare,
    CholCheck: row.CholCheck,
    Fruits: row.Fruits,
    Age: toInteger(row.Age),
    MentHlth: row.MentHlth,
    Smoker: row.Smoker,
    Stroke: row.Stroke,
    HvyAlcoholConsump: row.HvyAlcoholConsump,
    HeartDiseaseorAttack: row.HeartDiseaseorAttack,
    PhysActivity: row.PhysActivity,
    Income: toInteger(row.Income),
    PhysHlth: row.PhysHlth,
    GenHlth: toInteger(row.GenHlth),
    Education: toInteger(row.Education),
    Diabetes_binary: row.Diabetes_binary,
    HighBP: row.HighBP,
    Veggies: row.Veggies,
    BMI: toFloat(row.BMI),
    NoDocbcCost: row.NoDocbcCost,
    HighChol: row.HighChol,
    DiffWalk: row.DiffWalk,
    Sex: row.Sex
  })",
  {
    batchSize: 1000,
    iterateList: true,
    parallel: false,
    limit: 20000 // This limits the total number of processed rows to 20,000
  }
);

CALL apoc.periodic.iterate(
  "LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row RETURN row",
  "CREATE (p:Patient {
    id: id(row),
    AnyHealthcare: row.AnyHealthcare,
    CholCheck: row.CholCheck,
    Fruits: row.Fruits,
    Age: toInteger(row.Age),
    MentHlth: row.MentHlth,
    Smoker: row.Smoker,
    Stroke: row.Stroke,
    HvyAlcoholConsump: row.HvyAlcoholConsump,
    HeartDiseaseorAttack: row.HeartDiseaseorAttack,
    PhysActivity: row.PhysActivity,
    Income: toInteger(row.Income),
    PhysHlth: row.PhysHlth,
    GenHlth: toInteger(row.GenHlth),
    Education: toInteger(row.Education),
    Diabetes_binary: row.Diabetes_binary,
    HighBP: row.HighBP,
    Veggies: row.Veggies,
    BMI: toFloat(row.BMI),
    NoDocbcCost: row.NoDocbcCost,
    HighChol: row.HighChol,
    DiffWalk: row.DiffWalk,
    Sex: row.Sex
  })",
  {
    batchSize: 1000,
    iterateList: true,
    parallel: false,
    limit: 20000 // This limits the total number of processed rows to 20,000
  }
);

// Load data and create nodes
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row LIMIT 2000000
CREATE (p:Patient {
  id: row.id,
  AnyHealthcare: row.AnyHealthcare,
  CholCheck: row.CholCheck,
  Fruits: row.Fruits,
  Age: toInteger(row.Age),
  MentHlth: row.MentHlth,
  Smoker: row.Smoker,
  Stroke: row.Stroke,
  HvyAlcoholConsump: row.HvyAlcoholConsump,
  HeartDiseaseorAttack: row.HeartDiseaseorAttack,
  PhysActivity: row.PhysActivity,
  Income: toInteger(row.Income),
  PhysHlth: row.PhysHlth,
  GenHlth: toInteger(row.GenHlth),
  Education: toInteger(row.Education),
  Diabetes_binary: row.Diabetes_binary,
  HighBP: row.HighBP,
  Veggies: row.Veggies,
  BMI: toFloat(row.BMI),
  NoDocbcCost: row.NoDocbcCost,
  HighChol: row.HighChol,
  DiffWalk: row.DiffWalk,
  Sex: row.Sex
});

// Load data and create nodes
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
CREATE (p:Patient {
  id: row.id,
  AnyHealthcare: row.AnyHealthcare,
  CholCheck: row.CholCheck,
  Fruits: row.Fruits,
  Age: toInteger(row.Age),
  MentHlth: row.MentHlth,
  Smoker: row.Smoker,
  Stroke: row.Stroke,
  HvyAlcoholConsump: row.HvyAlcoholConsump,
  HeartDiseaseorAttack: row.HeartDiseaseorAttack,
  PhysActivity: row.PhysActivity,
  Income: toInteger(row.Income),
  PhysHlth: row.PhysHlth,
  GenHlth: toInteger(row.GenHlth),
  Education: toInteger(row.Education),
  Diabetes_binary: row.Diabetes_binary,
  HighBP: row.HighBP,
  Veggies: row.Veggies,
  BMI: toFloat(row.BMI),
  NoDocbcCost: row.NoDocbcCost,
  HighChol: row.HighChol,
  DiffWalk: row.DiffWalk,
  Sex: row.Sex
});

// Load data and create nodes
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
CREATE (p:Patient {
  id: id(row),
  AnyHealthcare: row.AnyHealthcare,
  CholCheck: row.CholCheck,
  Fruits: row.Fruits,
  Age: toInteger(row.Age),
  MentHlth: row.MentHlth,
  Smoker: row.Smoker,
  Stroke: row.Stroke,
  HvyAlcoholConsump: row.HvyAlcoholConsump,
  HeartDiseaseorAttack: row.HeartDiseaseorAttack,
  PhysActivity: row.PhysActivity,
  Income: toInteger(row.Income),
  PhysHlth: row.PhysHlth,
  GenHlth: toInteger(row.GenHlth),
  Education: toInteger(row.Education),
  Diabetes_binary: row.Diabetes_binary,
  HighBP: row.HighBP,
  Veggies: row.Veggies,
  BMI: toFloat(row.BMI),
  NoDocbcCost: row.NoDocbcCost,
  HighChol: row.HighChol,
  DiffWalk: row.DiffWalk,
  Sex: row.Sex
});

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
RETURN row
LIMIT 2000000;

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
RETURN row
LIMIT 5;

CALL apoc.periodic.commit(
  "LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv'  AS row
   WITH row
   WHERE row.id IS NOT NULL
   LIMIT $limit
   CREATE (p:Patient {
     id: row.id,
     glucoseLevel: toFloat(row.glucoseLevel),
     bloodPressure: toFloat(row.bloodPressure),
     insulinLevel: toFloat(row.insulinLevel)
   })
   RETURN count(*)",
  {limit: 2000000}
);

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
CREATE (p:Patient {
  id: row.id,
  glucoseLevel: toFloat(row.glucoseLevel),
  bloodPressure: toFloat(row.bloodPressure),
  insulinLevel: toFloat(row.insulinLevel)
})
limit: 200000;

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
CREATE (p:Patient {
  id: row.id,
  glucoseLevel: toFloat(row.glucoseLevel),
  bloodPressure: toFloat(row.bloodPressure),
  insulinLevel: toFloat(row.insulinLevel)
})
limit 200000;

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
CREATE (p:Patient {
  id: row.id,
  glucoseLevel: toFloat(row.glucoseLevel),
  bloodPressure: toFloat(row.bloodPressure),
  insulinLevel: toFloat(row.insulinLevel)
})
row limit 200000;

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
CREATE (p:Patient {
  id: row.id,
  glucoseLevel: toFloat(row.glucoseLevel),
  bloodPressure: toFloat(row.bloodPressure),
  insulinLevel: toFloat(row.insulinLevel)
})
limit;

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
CREATE (p:Patient {
  id: row.id,
  glucoseLevel: toFloat(row.glucoseLevel),
  bloodPressure: toFloat(row.bloodPressure),
  insulinLevel: toFloat(row.insulinLevel)
})
limit 200000;

LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
CREATE (p:Patient {
  id: row.id,
  glucoseLevel: toFloat(row.glucoseLevel),
  bloodPressure: toFloat(row.bloodPressure),
  insulinLevel: toFloat(row.insulinLevel)
});

CREATE CONSTRAINT UniqueCharacterId ON (c:Character) ASSERT c.id IS UNIQUE;

WITH "https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv" AS uriLOAD CSV WITH HEADERS FROM uri AS rowMERGE (c:Character {id:row.Id})
SET c.name = row.Label;

WITH "https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv" AS uriLOAD CSV: WITH HEADERS FROM uri AS rowMERGE (c:Character {id:row.Id})
SET c.name = row.Label;

WITH "https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv" AS uriLOAD CSV: WITH HEADERS FROM uri AS rowMERGE (c:Character {id:row.Id})
SET c.name = row.Label;

WITH "https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv" AS uriLOAD CSV: WITH HEADERS FROM uri AS rowMERGE (c:Character {id:row.Id})
SET c.name = row.Label;

WITH "https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv" AS uriLOAD CSV WITH HEADERS FROM uri AS rowMERGE (c:Character {id:row.Id})
SET c.name = row.Label;

CREATE CONSTRAINT UniqueCharacterId FOR (c:Character) REQUIRE c.id IS UNIQUE;

CREATE CONSTRAINT UniqueCharacterId FOR (c:Character) REQUIRE c.id IS UNIQUE;

CREATE CONSTRAINT UniqueCharacterId ON (c:Character) ASSERT c.id IS UNIQUE;

LOAD CSV FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
MERGE (c:Character {id:row.id})
SET c.name = row.Label
RETURN row;

LOAD CSV FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row

RETURN row;

CREATE CONSTRAINT UniqueCharacterId FOR (c:Character) REQUIRE c.id IS UNIQUE;

CREATE CONSTRAINT UniqueCharacterId FOR (c:Character) REQUIRE c.id IS UNIQUE;

LOAD CSV FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row

RETURN row;

LOAD CSV FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
MERGE (c:Character {id:row.id})
SET c.name = row.Label
RETURN row;

LOAD CSV FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
MERGE (c:Character {id:row.id})
SET c.name = row.Label
RETURN row;

LOAD CSV FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
MERGE (c:Character {id:row.Id})
SET c.name = row.Label
RETURN row;

CREATE CONSTRAINT UniqueCharacterId FOR (c:Character) REQUIRE c.id IS UNIQUE;

CREATE CONSTRAINT UniqueCharacterId ON (c:Diabetes_binary) ASSERT c.id IS UNIQUE;

CREATE CONSTRAINT UniqueCharacterId ON (c:Character) ASSERT c.id IS UNIQUE;

CREATE CONSTRAINT UniqueCharacterId ON (c:Character) ASSERT c.id IS UNIQUE;

call db.schema.visualization();

call db.schema.visualization();

LOAD CSV FROM 'https://raw.githubusercontent.com/MuhammadIrfan5/bigaatamanagementneo/main/diabetes_binary_health_indicators_BRFSS2015_Modified_with_Purpose.csv' AS row
RETURN row;